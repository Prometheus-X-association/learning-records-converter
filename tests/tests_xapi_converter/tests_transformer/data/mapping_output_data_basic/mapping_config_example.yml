version: 1.0
input_format: "SCORM"
output_format: "xAPI"
mappings:
  # Single input + Mulitple output
  - input_fields: 
    - "scorm.actor.value"
    output_fields:
      description: "Can map multiple fields"
      multiple:
        # Direct mapping
        - description: ""
          output_field: "xapi.actor.type"
        # Switch tranformation
        - transformation:
            switch:
              - description: "No output needed because already passed before."
                condition: "lambda val: is_empty(val)"
                # Value tranformation
                output_field: "xapi.actor.empty_val"
                transformation:
                  value: "anything"
              - condition: "lambda val: not is_empty(val) and val >= 0"
                output_field: "xapi.actor.positive"
              - condition: "lambda val: not is_empty(val) and val < 0"
                output_field: "xapi.actor.negative"
                transformation:
                  custom:
                    - "lambda val: -1 * val"
                    - "lambda val: str(val) + 'is now an absolute number'"
              - condition: "default"
                multiple:
                  - output_field: "xapi.actor.default.str"
                    transformation:
                      value: "default"
                  - output_field: "xapi.actor.value.int"
                    transformation:
                      value: 0
  # Single input + Single output
  - input_fields: 
    - "scorm.object.value"
    output_fields:
      output_field: "xapi.object.value"
  # Multiple input + Single output
  - input_fields:
    - "scorm.author.firstname"
    - "scorm.author.lastname"
    - "scorm.author.age"
    output_fields:
      output_field: "xapi.author.description"
      transformation:
        custom:
          - "lambda fn, ln, age: f'My name is {fn} {ln.upper()}, I am {age} years old.'"
  # Multiple input + Multiple output
  - input_fields:
    - "scorm.context.where"
    - "scorm.context.why"
    output_fields:
      multiple: 
        - output_field: "xapi.context.full_content" 
        - output_field: "xapi.context.description"
          transformation:
            custom:
              - "lambda where, why: f'{where} {why}'" 
              - "lambda description: (description.lower(), description.upper())"
              - "lambda l, u: f'{l} {u}'" 
              - "lambda description: description.split(' ')" 
              - "lambda list_split: f'{' '.join(list_split)} - length of {len(list_split)}'" 

default_values:
  - description: ""
    output_field: "xapi.default.dict"
    # Value tranformation
    transformation:
      value: {"a": "b", "empty": null, "list": ["a", "b", "c"]}
  - description: ""
    output_field: "xapi.default.list"
    # Value tranformation
    transformation:
      value: ["a", "b", "c"]
  - description: ""
    output_field: "xapi.default.int"
    # Value tranformation
    transformation:
      value: 0
  - description: ""
    output_field: "xapi.default.float"
    # Value tranformation
    transformation:
      value: 1.5
  - description: ""
    output_field: "xapi.default.str"
    # Value tranformation
    transformation:
      value: "string here"
  - description: ""
    output_field: "xapi.default.boolean"
    # Value tranformation
    transformation:
      value: false
  - description: ""
    output_field: "xapi.default.empty"
    # Value tranformation
    transformation:
      value: null
  - description: ""
    output_field: "xapi.context.full_content" 
    # Value tranformation
    transformation:
      value: "No full content in context provided"
  - description: ""
    output_field: "xapi.actor.type"
    # Value tranformation
    transformation:
      value: "No actor type provided"

metadata:
  author: "Your Name"
  # version: 1.0
  date:
    publication: "2023-01-01"
    update: "2023-02-01"




# COMMENT ON GERE LES LISTES D'OBJECT
# COMMENT ON GERE LES
